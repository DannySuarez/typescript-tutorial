{"version":3,"sources":["src/interfaces.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.a3dbd062.map","sourceRoot":"..","sourcesContent":["export interface Person {\n  name: string,\n  age?: number,\n}\n\n// String enum\nexport enum Type2 {\n  Video = 'Videp',\n  BlogPost = 'Blog_Post',\n  Quiz = 'Quiz'\n}","import { Person, Type2, } from \"./interfaces\";\n\nconst isOpen: boolean = false;\n\nconst myName: string = 'Danny';\n\nconst myAge: number = 29;\n\nconst list: number[] = [0, 1, 2];\n\n//first item string, second item number\n//tuple\nconst me: [string, number] = ['Danny', 29];\n\n//enum\nenum Job { \n  WebDev, \n  FullStack, \n  Developer\n}\n\nconst job: Job = Job.FullStack;\n\nconst phone : any = 'Pixel';\nconst tablet: any = 3;\n\n// functions\n// ? for optional params\n// const sayWord = (word?: string) : string => {\n\nconst sayWord = (word?: string) : string => {\n  console.log(word || 'hello')\n  return word || 'hello';\n}\n\nsayWord();\n\n// default params\nconst sayAnotherWord = (word = \"hello\", ...otherStuff: string[]) : string => {\n  console.log(otherStuff)\n  return word;\n}\n\nsayAnotherWord('Danny', 'Kami', 'Bezi');\n\n// implicit types in TS\nlet newName = 'Danny';\nnewName = 'Jon';\n//newName = 10;\n\n// Gets typed from initial decloration\nlet newNameTwo: string = newName;\n//newNameTwo = 23;\n\n// Union types with TS\nconst makeMargin = (x: string | number): string => {\n  return `margin: ${x}px`;\n}\n\nmakeMargin(10);\nmakeMargin('10');\n\n// Null types\nlet dog: string = 'Duncan';\ndog = null;\ndog = 'Bezi';\n//dog = 4;\ndog = undefined;\n\n// Interfaces\n\n// const sayName = ({ name, age }: Person) : string => {\n//   console.log(name)\n//   return name;\n// }\n\nconst sayName = ({ name, age }: Person) : Person => {\n  console.log(name, age)\n  return { name, age };\n}\n\nsayName({\n  name: 'Danny'\n});\n\nsayName({\n  age: 29,\n  name: 'Danny'\n});\n\n// Enums numeric & string based\n// Numeric\nenum Type {\n  Video, //0\n  BlogPost, //1\n  Quiz //2\n}\n\nconst createContent = (contentType: Type) => {}\ncreateContent(0)\n\n// String \n\nconst createContent2 = (contentType: Type2) => {}\ncreateContent2(Type2.Quiz)\nconsole.log('type2.Quiz', Type2.Quiz); //Quiz\n\n// Classes\nclass Team {\n  teamName: string;\n  //public teamName: string, same as above;\n  //private teamName: string, prevents outside usage;\n  //readonly teamName: string, prevents change;\n\n  constructor(teamName) {\n    this.teamName = teamName;\n  }\n\n  score(): string {\n    console.log(this.teamName);\n    return 'goal';\n  }\n\n}\n\nconst Blazers = new Team('Blazers');\n\nBlazers.score();\nBlazers.teamName;\n\n// Generics\nconst outputInput = <T>(arg: T): T => {\n  return arg;\n}\n\nconst output = outputInput('hi')\nconsole.log(output);\n\noutputInput(3)\n\n// Duck Typing\nclass Dancer implements Person {\n  name: string;\n  age?: number;  \n}\n\nlet Danny: Person = new Dancer();\n\n//requirements are met \nconst fake = {\n  name: \"danny\",\n  year: 30\n}\n\nDanny = fake;\n"]}